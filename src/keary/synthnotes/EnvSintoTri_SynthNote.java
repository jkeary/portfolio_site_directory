package keary.synthnotes;

import java.io.*;
import com.softsynth.jsyn.*;

/**************
** WARNING - this code automatically generated by Wire.
** The real source is probably a Wire patch.
** Do NOT edit this file unless you copy it to another directory and change the name.
** Otherwise it is likely to get clobbered the next time you
** export Java source code from Wire.
**
** Wire is available from: http://www.softsynth.com/wire/
*/
public class EnvSintoTri_SynthNote extends SynthNote
{
    // Declare units and ports.
    SineOscillator sinOsc;
    public SynthInput input;
    TriangleOscillator triOsc;
    public SynthInput triFreq;
    EnvelopePlayer envPlay;
    SynthEnvelope envelope;
    SynthEnvelope envelope2;
    EnvelopePlayer envPlay2;

    public EnvSintoTri_SynthNote()
    {
        this( Synth.getSharedContext() );
    }
    public EnvSintoTri_SynthNote( SynthContext synthContext )
    {
        super( synthContext );
        // Create unit generators.
        add( sinOsc = new SineOscillator(synthContext) );
        add( triOsc = new TriangleOscillator(synthContext) );
        add( envPlay = new EnvelopePlayer(synthContext) );
        double[] envelopeData = {
            0.1, 1.0, 
            0.5, 0.2, 
            1.4477315941744568, 0.9541666666666667, 
            0.4885666666666666, 0.0, 
        };
        envelope = new SynthEnvelope( synthContext, envelopeData );
        envelopeData = null;
        envelope.setSustainLoop( -1, -1 );
        envelope.setReleaseLoop( -1, -1 );
        double[] envelope2Data = {
            0.1, 1.0, 
            0.5, 0.2, 
            1.9646453982651817, 0.0, 
        };
        envelope2 = new SynthEnvelope( synthContext, envelope2Data );
        envelope2Data = null;
        envelope2.setSustainLoop( -1, -1 );
        envelope2.setReleaseLoop( -1, -1 );
        add( envPlay2 = new EnvelopePlayer(synthContext) );
        // Connect units and ports.

        addPort( frequency = envPlay2.amplitude, "frequency" );
        frequency.setup( 0.0, 349.22923456435507, 300.0 );
        addPort( output = triOsc.output, "output" );
        sinOsc.phase.set( 0, 0.23990399195956447 );
        sinOsc.output.connect( triOsc.amplitude);

        addPort( input = sinOsc.amplitude, "input" );
        input.setup( 0.0, 0.5, 1.0 );
        triOsc.phase.set( 0, -0.8802449789001865 );

        addPort( triFreq = envPlay.amplitude, "triFreq" );
        triFreq.setup( 0.0, 60.49262718294213, 300.0 );
        envPlay.rate.set( 0, 1.0 );
        envPlay.output.connect( triOsc.frequency);
        envPlay2.rate.set( 0, 1.0 );
        envPlay2.output.connect( sinOsc.frequency);
    }
    
    public void setStage( int time, int stage )
    {
        switch( stage )
        {
        case 0:
            envPlay.envelopePort.clear( time );
            envPlay.envelopePort.queueOn( time, envelope );
            envPlay2.envelopePort.clear( time );
            envPlay2.envelopePort.queueOn( time, envelope2 );
            start( time );
            break;
        case 1:
            envPlay.envelopePort.queueOff( time, envelope );
            envPlay2.envelopePort.queueOff( time, envelope2 );
            break;
        default:
            break;
        }
    }
}
