package keary.synthnotes;
import java.io.*;
import com.softsynth.jsyn.*;
/**************
** WARNING - this code automatically generated by Wire.
** The real source is probably a Wire patch.
** Do NOT edit this file unless you copy it to another directory and change the name.
** Otherwise it is likely to get clobbered the next time you
** export Java source code from Wire.
**
** Wire is available from: http://www.softsynth.com/wire/
*/
public class MultSynthNote extends SynthNote
{
    // Declare units and ports.
    SawtoothOscillatorBL sawOscBl;
    TriangleOscillator triOsc;
    MultiplyUnit mult;
    SynthEnvelope envelope;
    EnvelopePlayer envPlay;
    RedNoise redNse;
    MultiplyUnit mult2;
    public SynthInput freqRatio;
    public SynthInput redFreq;
    public SynthInput redAmp;

    public MultSynthNote()
    {
        this( Synth.getSharedContext() );
    }
    public MultSynthNote( SynthContext synthContext )
    {
        super( synthContext );
        // Create unit generators.
        frequency = new SynthDistributor( this, "frequency" );
        add( sawOscBl = new SawtoothOscillatorBL(synthContext) );
        add( triOsc = new TriangleOscillator(synthContext) );
        add( mult = new MultiplyUnit(synthContext) );
        double[] envelopeData = {
            0.1, 1.0, 
            0.5, 0.2, 
            0.5, 0.0, 
        };
        envelope = new SynthEnvelope( synthContext, envelopeData );
        envelopeData = null;
        envelope.setSustainLoop( 2, 2 );
        envelope.setReleaseLoop( -1, -1 );
        add( envPlay = new EnvelopePlayer(synthContext) );
        add( redNse = new RedNoise(synthContext) );
        add( mult2 = new MultiplyUnit(synthContext) );
        // Connect units and ports.
        frequency.connect( sawOscBl.frequency);
        frequency.connect( mult2.inputA);
        frequency.setup( 0.0, 293.6656114469648, 3000.0 );

        addPort( amplitude = envPlay.amplitude, "amplitude" );
        amplitude.setup( 0.0, 0.5, 1.0 );
        addPort( output = mult.output, "output" );
        sawOscBl.phase.set( 0, -0.890268187514224 );
        sawOscBl.output.connect( mult.inputA);
        triOsc.phase.set( 0, -0.1744720098717203 );
        triOsc.output.connect( mult.inputB);
        envPlay.rate.set( 0, 1.0 );
        envPlay.output.connect( sawOscBl.amplitude);
        redNse.phase.set( 0, 0.550589532439508 );
        redNse.output.connect( triOsc.amplitude);
        mult2.output.connect( triOsc.frequency);

        addPort( freqRatio = mult2.inputB, "freqRatio" );
        freqRatio.setup( 0.0, 1.3144998244242532, 10.0 );

        addPort( redFreq = redNse.frequency, "redFreq" );
        redFreq.setup( 0.0, 101.61803819749785, 100.0 );

        addPort( redAmp = redNse.amplitude, "redAmp" );
        redAmp.setup( 0.0, 0.6628873927960722, 1.0 );
    }
    
    public void setStage( int time, int stage )
    {
        switch( stage )
        {
        case 0:
            envPlay.envelopePort.clear( time );
            envPlay.envelopePort.queueOn( time, envelope );
            start( time );
            break;
        case 1:
            envPlay.envelopePort.queueOff( time, envelope, true );
            break;
        default:
            break;
        }
    }
}