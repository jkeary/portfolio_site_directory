package keary.synthnotes;

import java.io.*;
import com.softsynth.jsyn.*;

/**************
** WARNING - this code automatically generated by Wire.
** The real source is probably a Wire patch.
** Do NOT edit this file unless you copy it to another directory and change the name.
** Otherwise it is likely to get clobbered the next time you
** export Java source code from Wire.
**
** Wire is available from: http://www.softsynth.com/wire/
*/
public class MySawTritoImpSynthNote extends SynthNote
{
    // Declare units and ports.
    SawtoothOscillatorBL sawOscBl;
    TriangleOscillator triOsc;
    public SynthInput trifreq;
    public SynthInput triAmp;
    MultiplyUnit mult;
    ImpulseOscillatorBL impOscBl;
    public SynthInput impFreq;

    public MySawTritoImpSynthNote()
    {
        this( Synth.getSharedContext() );
    }
    public MySawTritoImpSynthNote( SynthContext synthContext )
    {
        super( synthContext );
        // Create unit generators.
        add( sawOscBl = new SawtoothOscillatorBL(synthContext) );
        add( triOsc = new TriangleOscillator(synthContext) );
        add( mult = new MultiplyUnit(synthContext) );
        add( impOscBl = new ImpulseOscillatorBL(synthContext) );
        // Connect units and ports.
        sawOscBl.phase.set( 0, 0.8210328490954858 );
        sawOscBl.output.connect( mult.inputA);

        addPort( amplitude = sawOscBl.amplitude, "amplitude" );
        amplitude.setup( 0.0, 1.0, 1.0 );

        addPort( frequency = sawOscBl.frequency, "frequency" );
        frequency.setup( 0.0, 6.09, 10.0 );
        addPort( output = impOscBl.output, "output" );
        triOsc.phase.set( 0, -0.05106099965001501 );
        triOsc.output.connect( mult.inputB);

        addPort( trifreq = triOsc.frequency, "trifreq" );
        trifreq.setup( 0.0, 1070.0, 2000.0 );

        addPort( triAmp = triOsc.amplitude, "triAmp" );
        triAmp.setup( 0.0, 0.8275, 1.0 );
        mult.output.connect( impOscBl.amplitude);
        impOscBl.phase.set( 0, -0.6433471774708505 );

        addPort( impFreq = impOscBl.frequency, "impFreq" );
        impFreq.setup( 0.0, 264.0, 1000.0 );
    }
    
    public void setStage( int time, int stage )
    {
        switch( stage )
        {
        case 0:
            start( time );
            break;
        case 1:
            break;
        default:
            break;
        }
    }
}
