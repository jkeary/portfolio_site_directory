package keary.synthnotes;
import java.io.*;
import com.softsynth.jsyn.*;
/**************
** WARNING - this code automatically generated by Wire.
** The real source is probably a Wire patch.
** Do NOT edit this file unless you copy it to another directory and change the name.
** Otherwise it is likely to get clobbered the next time you
** export Java source code from Wire.
**
** Wire is available from: http://www.softsynth.com/wire/
*/
public class RNoisePatch_SynthNote extends SynthNote
{
    // Declare units and ports.
    PulseOscillatorBL plsOscBl;
    RedNoise redNse;
    MultiplyUnit mult;
    public SynthInput RNoiseFreq;
    public SynthInput RNoiseAmp;
    EnvelopePlayer envPlay;
    SynthEnvelope envelope;
    SynthEnvelope envelope2;
    EnvelopePlayer envPlay2;

    public RNoisePatch_SynthNote()
    {
        this( Synth.getSharedContext() );
    }
    public RNoisePatch_SynthNote( SynthContext synthContext )
    {
        super( synthContext );
        // Create unit generators.
        add( plsOscBl = new PulseOscillatorBL(synthContext) );
        add( redNse = new RedNoise(synthContext) );
        add( mult = new MultiplyUnit(synthContext) );
        add( envPlay = new EnvelopePlayer(synthContext) );
        double[] envelopeData = {
            1.3242278644984098, 1.0, 
            0.5, 0.2, 
            0.5, 0.0, 
        };
        envelope = new SynthEnvelope( synthContext, envelopeData );
        envelopeData = null;
        envelope.setSustainLoop( -1, -1 );
        envelope.setReleaseLoop( -1, -1 );
        double[] envelope2Data = {
            1.1164883332448614, 0.32083333333333336, 
            0.2629149946028222, 1.0, 
            0.7023071773637026, 0.0, 
        };
        envelope2 = new SynthEnvelope( synthContext, envelope2Data );
        envelope2Data = null;
        envelope2.setSustainLoop( -1, -1 );
        envelope2.setReleaseLoop( -1, -1 );
        add( envPlay2 = new EnvelopePlayer(synthContext) );
        // Connect units and ports.

        addPort( frequency = envPlay.amplitude, "frequency" );
        frequency.setup( 0.0, 261.6263168, 3000.0 );

        addPort( amplitude = plsOscBl.amplitude, "amplitude" );
        amplitude.setup( 0.0, 0.5, 1.0 );
        addPort( output = mult.output, "output" );
        plsOscBl.phase.set( 0, -0.312087760946118 );
        plsOscBl.width.set( 0, 0.0 );
        plsOscBl.output.connect( mult.inputB);
        redNse.phase.set( 0, 0.14783113950872945 );
        redNse.output.connect( mult.inputA);

        addPort( RNoiseFreq = envPlay2.amplitude, "RNoiseFreq" );
        RNoiseFreq.setup( 0.0, 1549.0563044279436, 3000.0 );

        addPort( RNoiseAmp = redNse.amplitude, "RNoiseAmp" );
        RNoiseAmp.setup( 0.0, 1.9317531957568812, 20.0 );
        envPlay.rate.set( 0, 1.0 );
        envPlay.output.connect( plsOscBl.frequency);
        envPlay2.rate.set( 0, 1.0 );
        envPlay2.output.connect( redNse.frequency);
    }
    
    public void setStage( int time, int stage )
    {
        switch( stage )
        {
        case 0:
            envPlay.envelopePort.clear( time );
            envPlay.envelopePort.queueOn( time, envelope );
            envPlay2.envelopePort.clear( time );
            envPlay2.envelopePort.queueOn( time, envelope2 );
            start( time );
            break;
        case 1:
            envPlay.envelopePort.queueOff( time, envelope );
            envPlay2.envelopePort.queueOff( time, envelope2 );
            break;
        default:
            break;
        }
    }
}
