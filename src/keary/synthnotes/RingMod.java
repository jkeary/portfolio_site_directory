package keary.synthnotes;

import java.io.*;
import com.softsynth.jsyn.*;
/**************
** WARNING - this code automatically generated by Wire.
** The real source is probably a Wire patch.
** Do NOT edit this file unless you copy it to another directory and change the name.
** Otherwise it is likely to get clobbered the next time you
** export Java source code from Wire.
**
** Wire is available from: http://www.softsynth.com/wire/
*/
public class RingMod extends SynthNote
{
    // Declare units and ports.
    SineOscillator sinOsc;
    SineOscillator sinOsc2;
    MultiplyAddUnit multAdd;
    public SynthInput amp2;
    public SynthInput freq2;

    public RingMod()
    {
        this( Synth.getSharedContext() );
    }
    public RingMod( SynthContext synthContext )
    {
        super( synthContext );
        // Create unit generators.
        add( sinOsc = new SineOscillator(synthContext) );
        add( sinOsc2 = new SineOscillator(synthContext) );
        add( multAdd = new MultiplyAddUnit(synthContext) );
        // Connect units and ports.

        addPort( frequency = sinOsc.frequency, "frequency" );
        frequency.setup( 0.0, 440.0, 3000.0 );

        addPort( amplitude = sinOsc.amplitude, "amplitude" );
        amplitude.setup( 0.0, 0.5, 1.0 );
        addPort( output = multAdd.output, "output" );
        sinOsc.phase.set( 0, 0.023582766431026005 );
        sinOsc.output.connect( multAdd.inputB);
        sinOsc2.phase.set( 0, -0.7673469387214684 );
        sinOsc2.output.connect( multAdd.inputA);
        multAdd.inputC.set( 0, 0.0 );

        addPort( amp2 = sinOsc2.amplitude, "amp2" );
        amp2.setup( 0.0, 0.5, 1.0 );

        addPort( freq2 = sinOsc2.frequency, "freq2" );
        freq2.setup( 0.0, 0.5, 1.0 );
    }
    //turning sound on and off with stages
    public void setStage( int time, int stage )
    {
        switch( stage )
        {
        case 0:
            start( time );
            break;
        case 1:
            break;
        default:
            break;
        }
    }
}
