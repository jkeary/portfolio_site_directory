package keary.synthnotes;
import java.io.*;
import com.softsynth.jsyn.*;
/**************
** WARNING - this code automatically generated by Wire.
** The real source is probably a Wire patch.
** Do NOT edit this file unless you copy it to another directory and change the name.
** Otherwise it is likely to get clobbered the next time you
** export Java source code from Wire.
**
** Wire is available from: http://www.softsynth.com/wire/
*/
public class Squeeks_SynthNote extends SynthNote
{
    // Declare units and ports.
    SineOscillator sinOsc;
    SineOscillator sinOsc2;
    SineOscillator sinOsc3;
    public SynthInput Sin2RangeAmp;
    public SynthInput Sin3ModFreq;

    public Squeeks_SynthNote()
    {
        this( Synth.getSharedContext() );
    }
    public Squeeks_SynthNote( SynthContext synthContext )
    {
        super( synthContext );
        // Create unit generators.
        add( sinOsc = new SineOscillator(synthContext) );
        add( sinOsc2 = new SineOscillator(synthContext) );
        add( sinOsc3 = new SineOscillator(synthContext) );
        // Connect units and ports.

        addPort( frequency = sinOsc.frequency, "frequency" );
        frequency.setup( 0.0, 2.18018208904266, 5.0 );

        addPort( amplitude = sinOsc.amplitude, "amplitude" );
        amplitude.setup( 0.0, 450.0, 20000.0 );
        addPort( output = sinOsc3.output, "output" );
        sinOsc.phase.set( 0, 0.5837688139490456 );
        sinOsc.output.connect( sinOsc2.frequency);
        sinOsc2.phase.set( 0, 0.3746430900745391 );
        sinOsc2.output.connect( sinOsc3.amplitude);
        sinOsc3.phase.set( 0, -0.09024258434876692 );

        addPort( Sin2RangeAmp = sinOsc2.amplitude, "Sin2RangeAmp" );
        Sin2RangeAmp.setup( 0.0, 0.745, 1.0 );

        addPort( Sin3ModFreq = sinOsc3.frequency, "Sin3ModFreq" );
        Sin3ModFreq.setup( 0.0, 1.477674369752546, 5.0 );
    }
    
    public void setStage( int time, int stage )
    {
        switch( stage )
        {
        case 0:
            start( time );
            break;
        case 1:
            break;
        default:
            break;
        }
    }
}
